[tox]
skipsdist = true
envlist = {py38}-{test,docs,develop},test,docs,coverage,release,package,develop

# Test environments
[testenv]
passenv =
        TERM
        PYTEST_ADDOPTS
setenv =
       TERM = {env:TERM}
       PIP_DISABLE_PIP_VERSION_CHECK = 1
       {py27,pypy}: PYTHONWARNINGS = ignore:DEPRECATION::pip._internal.cli.base_command
envdir =
       {test,docs,coverage,release,package,develop,debug}: {toxinidir}/.tox/.{envname}
allowlist_externals =
                    /bin/bash

# common
[testenv:common-version]
commands =
         {envpython} -c "print(r'{envpython}')"
         bash -c '{envpython} -m pip list --format=columns'

# docs
[testenv:docs-pydoc]
commands =
         bash -c 'make PYTHON={envpython} doc'

[testenv:docs-man]
commands =
         bash -c 'make man'
         bash -c 'make manhtml'

# lint
[testenv:lint-pylint]
deps =
     pylint
commands =
         bash -c '{envpython} -m pylint ranger_async.py $(find ranger_async -iname "*.py")'

[testenv:lint-pycodestyle]
deps =
     pycodestyle
commands =
         bash -c '{envpython} -m pycodestyle ranger_async.py $(find ranger_async -iname "*.py")'

[testenv:lint-flake8]
deps =
     flake8
     flake8-spellcheck
     wemake-python-styleguide
commands =
         bash -c 'flake8 ranger_async.py $(find tests -iname "*.py") $(find ranger_async -iname "*.py")'

[testenv:lint-flakehell]
deps =
     {[testenv:lint-flake8]deps}
     flakehell
commands =
         bash -c 'flakehell lint ranger_async.py $(find tests -iname "*.py") $(find ranger_async -iname "*.py") | xargs -d\\n printf "%s\n"'

# test
[testenv:test-pytest]
deps =
     pytest
     pytest-cov
     pytest-mock
     pytest-randomly
     pytest-xdist
commands =
         pytest \
         --cov "{toxinidir}/ranger_async" \
         --cov-config "{toxinidir}/setup.cfg" \
         --junitxml {toxworkdir}/junit.{envname}.xml \
         -n={env:PYTEST_XDIST_PROC_NR:auto} \
         {posargs:.}

[testenv:test-doctest]
commands =
         bash -c 'make PYTHON={envpython} test_doctest'

[testenv:test-other]
commands =
         bash -c 'make test_other'

# release
[testenv:release-install]
passenv =
        PYTHONOPTIMIZE
setenv =
       SETUPOPTS = '--record=install_log.txt'
commands =
         {envpython} setup.py install {env:SETUPOPTS} --optimize={env:PYTHONOPTIMIZE:1}

[testenv:release-compile]
passenv =
        PYTHONOPTIMIZE
setenv =
       PYTHONOPTIMIZE={env:PYTHONOPTIMIZE:1}
commands =
         {envpython} -m compileall -q ranger_async
 
[testenv:release-check]
passenv = 
        PYCHECKONLY
deps =
     isort
     black
commands =
         bash -c 'isort {env:PYCHECKONLY:--check} ranger_async.py $(find tests -iname "*.py") $(find ranger_async -iname "*.py")'
         bash -c 'black {env:PYCHECKONLY:--check} ranger_async.py $(find tests -iname "*.py") $(find ranger_async -iname "*.py")'

[testenv:package-snapshot]
commands =
         bash -c 'make PYTHON={envpython} snapshot'

[testenv:package-clean]
commands =
         bash -c 'make clean'
         bash -c 'make cleandoc'

# develop
[testenv:develop-tools]
deps =
     ipython
     ipdb

[testenv:develop-completion]
deps =
     jedi==0.17.2

[testenv:develop-mypy]
deps =
     mypy
commands =
         bash -c 'mypy --show-error-codes $(find ranger_async -iname "*.py")'

# coverage
[testenv:{py38-,py310-,pypy3-,}coverage]
description = generates a diff coverage against origin/master
deps =
     coverage
     diff_cover
setenv =
       COVERAGE_FILE = {toxinidir}/.coverage
commands =
         - coverage combine
         coverage report -m
         coverage xml -o {toxworkdir}/{envname}.coverage.xml
         coverage html -d {toxworkdir}/{envname}-htmlcov
         - diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} {toxworkdir}/{envname}.coverage.xml
         - coverage erase
depends =
        testenv:test-pytest
parallel_show_output = True


# Environments stuff
# -- docs
[testenv:{py38-,py310-,pypy3-,}docs]
deps =
commands =
         {[testenv:docs-man]commands}
         {[testenv:docs-pydoc]commands}

# -- test
[testenv:{py38-,py310-,pypy3-,}test]
description = test environment
passenv =
        {[testenv:release-check]passenv}
deps =
     {[testenv:release-check]deps}
     {[testenv:lint-flakehell]deps}
     {[testenv:develop-mypy]deps}
     {[testenv:test-pytest]deps}
commands =
         {[testenv:common-version]commands}
         - {[testenv:release-check]commands}
         - {[testenv:lint-flakehell]commands}
         - {[testenv:develop-mypy]commands}
         {[testenv:test-pytest]commands}
         - {[testenv:test-doctest]commands}
         - {[testenv:test-other]commands}
usedevelop = true

# -- release
[testenv:{py38-,py310-,pypy3-,}release]
description = release environment
passenv = 
        {[testenv:release-check]passenv}
        {[testenv:release-compile]passenv}
setenv =
       {[testenv:release-compile]setenv}
       {[testenv:release-install]setenv}
deps =
     {[testenv:release-check]deps}
commands =
         {[testenv:common-version]commands}
         {[testenv:release-check]commands}
         {[testenv:release-compile]commands}
         {[testenv:release-install]commands}

# -- package
[testenv:{py38-,py310-,pypy3-,}package]
description = package environment
commands =
         {[testenv:common-version]commands}
         {[testenv:package-clean]commands}
         {[testenv:package-snapshot]commands}

# -- develop
[testenv:{py38-,py310-,pypy3-,}develop]
description = develop environment
deps =
     {[testenv:release-check]deps}
     {[testenv:test]deps}
     {[testenv:docs]deps}
     {[testenv:develop-tools]deps}
     {[testenv:develop-completion]deps}
     {[testenv:develop-mypy]deps}
commands =
         {posargs:{[testenv:common-version]commands}}
usedevelop = true
